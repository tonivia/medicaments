# -*- coding: utf-8 -*-
"""
Created on Fri Aug 22 15:40:30 2014

@author: tvialette
"""

import numpy as np
import pandas as pd

from traitement_sniiram import (period, table_final, chute_brevet1)
from infos_tarifs import load_infos_tarifs
# Ce script a pour objectif de prolonger l'analyse en prenant en compte les prix,
# c'est assez lourd et long c'est pourquoi le fichier ca_par_cip13.csv est créé
# afin d'être réutilisé.

table_ca = table_final.copy()
infos_tarifs = load_infos_tarifs()

print "Boucle très très longue qui permet de calculer le chiffre d'affaires de chaque \
médicament grâce aux deux tables (tables_final et infos_tarifs)."
c = 0
nb_cip = len(infos_tarifs['CIP'].unique())
for cip in infos_tarifs['CIP'].unique():
    dates = infos_tarifs.loc[infos_tarifs['CIP'] == cip, 'date_appli_str']
    nb_periodes = len(dates.unique())
    date_fin = period[len(period)-1]
    if (c % 1000) == 0:
        print str((c*100) / nb_cip) + '%'
    c = c + 1
    if nb_periodes > 1:
        for date_debut in dates.unique():
            date_debut_idx = int(dates.index[dates == date_debut][0])
            date_debut = max(period[0], date_debut)
            try:
                cycle = period[period.index(date_debut): period.index(date_fin)]
                prix = infos_tarifs.loc[infos_tarifs.index == date_debut_idx, 'FAB_HT_E'].values
                table_ca.loc[table_ca['CIP13'] == cip, cycle] = table_final.loc[table_final['CIP13'] == cip, cycle]*prix
                date_fin = date_debut
            except ValueError:
                pass

path_export = "C:\\Users\\Toni\\Dropbox\\Toni Dropbox\\Vie etudiante\\M2\\Stage DGT\\Donnees\\Medicament\\pgm\\Export\\"
table_ca.loc[:, ['CIP13'] + period].to_csv(path_export+'ca_par_cip13.csv', sep=";", index=False)

# TODO: faire le même travaille sur les taux de remboursement.


#test = table_ca[table_ca['role']].groupby('group')[period]
#ca_princeps = table_ca[table_ca['role']].groupby('group')[period].sum()
#ca_generic = table_ca[~table_ca['role']].groupby('group')[period].sum()
#ca_total = table_ca.groupby('group')[period].sum()
#
#period_str = [str(t) for t in period]
#
#
#def graph_ca(group):
#    ''' Créer le plot de comparaison entre princeps et generic '''
#    col0 = ca_princeps.loc[group, :].values
#    col1 = ca_generic.loc[group, :].values
#    col2 = col0 + col1
#    output = DataFrame({'princeps': col0, 'generic': col1, 'total': col2}, index=period_str).plot() 
#    return output
#
## TODO: multiplier le taux de remboursement avec le chiffre d'affaires
## Pb TFR ou prix TTC ???
