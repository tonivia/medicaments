# -*- coding: utf-8 -*-
"""
Created on Fri Aug 29 16:19:54 2014

@author: tvialette
"""

import numpy as np
import pandas as pd
from pandas import DataFrame

from traitement_sniiram import table_final, period, chute_brevet1
from outils import (relative_dates, application_regression_rupture,
                   application_regression_simple, evolution, moving_average)


def graphs(group, name_table='nombre'):
    ''' Créer le plot de comparaison entre princeps et generic'''
    col0 = eval(name_table + '_princeps').loc[group, :].values
    col1 = eval(name_table + '_generic').loc[group, :].values
    col2 = eval(name_table + '_total').loc[group, :].values
    # TODO: title
    period_str = [str(t) for t in eval(name_table + '_total').columns]
    output = DataFrame({'princeps': col0, 'generic': col1, 'total': col2}, index=period_str).plot()
    return output

nombre_princeps = table_final[table_final['role']].groupby('group')[period].sum()
nombre_generic = table_final[~table_final['role']].groupby('group')[period].sum()
nombre_total = table_final.groupby('group')[period].sum()

moving_average_princeps = moving_average(nombre_princeps)
moving_average_generic = moving_average(nombre_generic)
moving_average_total = moving_average(nombre_total)

evolution_princeps = evolution(nombre_princeps)
evolution_generic = evolution(nombre_generic)
evolution_total = evolution(nombre_total)

trend_princeps = nombre_princeps.apply(lambda x: application_regression_rupture(x, chute_brevet1), axis=1)
trend_generic = nombre_generic.apply(application_regression_simple, axis=1)
trend_total = nombre_total.apply(lambda x: application_regression_rupture(x, chute_brevet1), axis=1)

table_chute_princeps = relative_dates(nombre_princeps, chute_brevet1, period=period)
table_chute_total = relative_dates(nombre_total, chute_brevet1, period=period)
table_chute_generique = relative_dates(nombre_generic, chute_brevet1, period=period)

# On peut mesurer la part relative des princeps dans la vente total à partir de la chute du brevet :
part_princeps = table_chute_princeps / table_chute_total
part_princeps_moyenne = np.mean(part_princeps)[len(period) - 1:]

evolution_princeps_zero = evolution(table_chute_princeps)
evolution_princeps_moyenne = np.mean(evolution_princeps_zero)
evolution_princeps_zero = evolution_princeps_zero.iloc[:, len(period) - 1:]

evolution_total_zero = evolution(table_chute_total)
evolution_total_moyenne = np.mean(evolution_total_zero)
